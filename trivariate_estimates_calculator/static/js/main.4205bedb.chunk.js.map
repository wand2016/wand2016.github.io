{"version":3,"sources":["index.jsx"],"names":["Calculator","props","state","estimateLines","EstimateLine","createDefault","lastCopy","this","length","setState","concat","i","copy","splice","newLine","event","replaceLineAt","withTaskName","target","value","withOptimistic","Number","withNominal","withPessimistic","className","map","estimateLine","Line","key","onRemoveRequested","removeLineAt","lineNumber","lineData","onTaskNameChange","createTaskNameChangeHandler","onOptimisticChange","createOptimisticChangeHandler","onNominalChange","createNominalChangeHandler","onPessimisticChange","createPessimisticChangeHandler","renderSummary","onClick","addLine","Summary","taskName","mu","summaryMu","sigma","summarySigma","allLinesValid","reduce","Math","sqrt","squaredSigma","every","isValid","filter","React","Component","type","onChange","optimistic","nominal","pessimistic","Mu","Sigma","toFixed","clone","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4205bedb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            estimateLines: [\n                EstimateLine.createDefault(),\n            ],\n        };\n    }\n\n    addLine() {\n        const lastCopy = this.state.estimateLines[this.state.estimateLines.length - 1];\n        this.setState({\n            estimateLines: this.state.estimateLines.concat(lastCopy || EstimateLine.createDefault()),\n        });\n    }\n\n    /**\n     * @param {number} i 行のインデックス\n     */\n    removeLineAt(i) {\n        const copy = this.state.estimateLines.concat();\n        copy.splice(i, 1);\n        this.setState({\n            estimateLines: copy,\n        });\n    }\n\n    /**\n     * @param {number} i 行のインデックス\n     * @param {EstimateLine} newLine\n     */\n    replaceLineAt(i, newLine) {\n        const copy = this.state.estimateLines.concat();\n        copy[i] = newLine;\n\n        this.setState({\n            estimateLines: copy,\n        });\n    }\n\n    /**\n     * @param {number} i 行のインデックス\n     */\n    createTaskNameChangeHandler(i) {\n        return (event) => this.replaceLineAt(i, this.state.estimateLines[i].withTaskName(event.target.value));\n    }\n\n    /**\n     * @param {number} i 行のインデックス\n     */\n    createOptimisticChangeHandler(i) {\n        return (event) => this.replaceLineAt(i, this.state.estimateLines[i].withOptimistic(Number(event.target.value)));\n    }\n\n    /**\n     * @param {number} i 行のインデックス\n     */\n    createNominalChangeHandler(i) {\n        return (event) => this.replaceLineAt(i, this.state.estimateLines[i].withNominal(Number(event.target.value)));\n    }\n\n    /**\n     * @param {number} i 行のインデックス\n     */\n    createPessimisticChangeHandler(i) {\n        return (event) => this.replaceLineAt(i, this.state.estimateLines[i].withPessimistic(Number(event.target.value)));\n    }\n\n    render() {\n        return (\n            <div className=\"calculator\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th>#</th>\n                            <th>タスク名</th>\n                            <th>楽観的見積もり<br />(O, &lt;1%)</th>\n                            <th>平均的見積もり<br />(N)</th>\n                            <th>悲観的見積もり<br />(P, &lt;1%)</th>\n                            <th>期待値<br />(μ)</th>\n                            <th>標準偏差<br />(σ)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.estimateLines.map((estimateLine, i) => {\n                            return (\n                                <Line key={i}\n                                    onRemoveRequested={() => this.removeLineAt(i)}\n                                    lineNumber={i + 1}\n                                    lineData={estimateLine}\n                                    onTaskNameChange={this.createTaskNameChangeHandler(i)}\n                                    onOptimisticChange={this.createOptimisticChangeHandler(i)}\n                                    onNominalChange={this.createNominalChangeHandler(i)}\n                                    onPessimisticChange={this.createPessimisticChangeHandler(i)}\n                                />\n                            );\n                        })}\n                        {this.renderSummary()}\n                    </tbody>\n                </table>\n                <button onClick={() => this.addLine()}>+</button>\n            </div>\n        );\n    }\n\n    renderSummary() {\n        if (this.state.estimateLines.length === 0) {\n            return null;\n        }\n\n        return (\n            <Summary taskName=\"合計\"\n                mu={this.summaryMu()}\n                sigma={this.summarySigma()}\n            />\n        );\n    }\n\n    summaryMu() {\n        if (!this.allLinesValid()) {\n            return null;\n        }\n\n        return this.state.estimateLines.reduce((mu, estimateLine) => {\n            return mu + estimateLine.mu();\n        }, 0)\n    }\n\n    summarySigma() {\n        if (!this.allLinesValid()) {\n            return null;\n        }\n\n        return Math.sqrt(\n            this.state.estimateLines.reduce((squaredSigma, estimateLine) => {\n                return squaredSigma + estimateLine.sigma() ** 2;\n            }, 0)\n        );\n    }\n\n    allLinesValid() {\n        return this.state.estimateLines.every((estimateLine) => estimateLine.isValid());\n    }\n\n    validLines() {\n        return this.state.estimateLines.filter((estimateLine) => estimateLine.isValid());\n    }\n}\n\nfunction Line(props) {\n    return (\n        <tr >\n            <td>\n                <button onClick={props.onRemoveRequested}>-</button>\n            </td>\n            <td>{props.lineNumber}</td>\n            <td><input type=\"text\"\n                value={props.lineData.taskName}\n                onChange={props.onTaskNameChange}\n            /></td>\n            <td><input type=\"number\"\n                value={props.lineData.optimistic}\n                onChange={props.onOptimisticChange}\n            /></td>\n            <td><input type=\"number\"\n                value={props.lineData.nominal}\n                onChange={props.onNominalChange}\n            /></td>\n            <td><input type=\"number\"\n                onChange={props.onPessimisticChange}\n                value={props.lineData.pessimistic} /></td>\n            <td><Mu value={props.lineData.mu()} /></td>\n            <td><Sigma value={props.lineData.sigma()} /></td>\n        </tr>\n    );\n}\n\nfunction Summary(props) {\n    return (\n        <tr >\n            <td></td>\n            <td></td>\n            <td>{props.taskName}</td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td><Mu value={props.mu} /></td>\n            <td><Sigma value={props.sigma} /></td>\n        </tr>\n    );\n}\n\nfunction Mu(props) {\n    const mu = props.value === null ? '-' : Number(props.value).toFixed(1);\n    return (\n        <output>{mu}</output>\n    );\n}\n\nfunction Sigma(props) {\n    const sigma = props.value === null ? '-' : Number(props.value).toFixed(1);\n    return (\n        <output>{sigma}</output>\n    );\n}\n\n\nclass EstimateLine {\n    taskName = 'task';\n    optimistic = 1;\n    nominal = 1;\n    pessimistic = 1;\n\n    constructor(taskName, optimistic, nominal, pessimistic) {\n        this.taskName = taskName;\n        this.optimistic = optimistic;\n        this.nominal = nominal;\n        this.pessimistic = pessimistic;\n    }\n    isValid() {\n        return 0 < this.optimistic\n            && this.optimistic <= this.nominal\n            && this.nominal <= this.pessimistic;\n\n    }\n\n    mu() {\n        if (!this.isValid()) {\n            return null;\n        }\n\n        return (this.optimistic + 4 * this.nominal + this.pessimistic) / 6.0;\n    }\n\n    sigma() {\n        if (!this.isValid()) {\n            return null;\n        }\n\n        return (this.pessimistic - this.optimistic) / 6.0;\n    }\n\n    /**\n     * @param {string} taskName\n     */\n    withTaskName(taskName) {\n        const newLine = this.clone();\n        newLine.taskName = taskName;\n        return newLine;\n    }\n\n    /**\n     * @param {number} optimistic\n     */\n    withOptimistic(optimistic) {\n        const newLine = this.clone();\n        newLine.optimistic = optimistic;\n        return newLine;\n    }\n\n    /**\n     * @param {number} nominal\n     */\n    withNominal(nominal) {\n        const newLine = this.clone();\n        newLine.nominal = nominal;\n        return newLine;\n    }\n\n    /**\n     * @param {number} pessimistic\n     */\n    withPessimistic(pessimistic) {\n        const newLine = this.clone();\n        newLine.pessimistic = pessimistic;\n        return newLine;\n    }\n\n    clone() {\n        return new EstimateLine(\n            this.taskName,\n            this.optimistic,\n            this.nominal,\n            this.pessimistic\n        );\n    }\n\n    static createDefault() {\n        return new EstimateLine('task', 1, 1, 1);\n    }\n}\n// ========================================\nReactDOM.render(\n    <Calculator />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}